"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatGPTError = void 0;
class ChatGPTError extends Error {
}
exports.ChatGPTError = ChatGPTError;
//# sourceMappingURL=data:application/json;base64,